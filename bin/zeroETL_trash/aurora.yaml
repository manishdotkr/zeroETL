AWSTemplateFormatVersion: 2010-09-09
Description: Aurora DB
Parameters:
  environment:
    Description: Name of the environment for this stack.
    Type: String
    AllowedValues:
      - dev
      - qa
      - stage
      - prod
  product:
    Type: String
  service:
    Type: String
Conditions:
  isProd: !Equals [ !Ref environment , prod ]
  isStage: !Equals [ !Ref environment , stage ]
  isSuperHighlyAvailable: !Or
    - !Condition isProd
    - !Condition isStage
Mappings:
  envMap:
    dev:
      masterUserName: gandalf
      roUserName: iamro
      masterDatabase: release
      backupRetentionPeriod: 7
      instanceType: db.r5.large
    qa:
      masterUserName: saruman
      roUserName: iamro
      masterDatabase: release
      backupRetentionPeriod: 7
      instanceType: db.r5.large
    stage:
      masterUserName: legolas
      roUserName: iamro
      masterDatabase: release
      backupRetentionPeriod: 14
      instanceType: db.r5.large
    prod:
      masterUserName: isildur
      roUserName: iamro
      masterDatabase: release
      backupRetentionPeriod: 14
      instanceType: db.r5.2xlarge #8vCPUs, 64GiB RAM, and EBS: 35000Mbps
Resources:
  auroraDBMasterCreds:
    Type: 'Custom::SecretsManager'
    Properties:
      ServiceToken: !ImportValue 
        'Fn::Sub': '${environment}-${product}-secretsManager-lambda'
      secretName: !Sub '/${environment}/${product}/${service}'
      secretUserName: !FindInMap 
        - envMap
        - !Ref environment
        - masterUserName
      secretDescription: !Sub '${product} Aurora Master Creds For ${environment}'
  auroraDBRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${environment}-${product}-${service}-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
  auroraDBPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub ${environment}-${product}-${service}-policy
      Roles:
        - !Ref auroraDBRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'rds:*'
              - 'logs:*'
              - 'cloudwatch:*'
            Resource: '*'
  auroraDBInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    DependsOn: auroraDBRole
    Properties:
      Path: /
      Roles:
        - !Ref auroraDBRole
  auroraDBScalableTargetRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${environment}-${product}-${service}-scalableTarget-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: rds.application-autoscaling.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
  auroraDBScalableTargetPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub ${environment}-${product}-${service}-scalableTarget-policy
      Roles:
        - !Ref auroraDBScalableTargetRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'rds:*'
              - 'cloudwatch:*'
              - 'iam:*'
            Resource: '*'
  auroraDBScalableTargetInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    DependsOn: auroraDBScalableTargetRole
    Properties:
      Path: /
      Roles:
        - !Ref auroraDBScalableTargetRole
  auroraDBMonitoringRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${environment}-${product}-${service}-monitoring-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: monitoring.rds.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
  auroraDBMonitoringPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub ${environment}-${product}-${service}-monitoring-policy
      Roles:
        - !Ref auroraDBMonitoringRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: EnableCreationAndManagementOfRDSCloudwatchLogGroups
            Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:PutRetentionPolicy'
            Resource:
              - 'arn:aws:logs:*:*:log-group:RDS*'
          - Sid: EnableCreationAndManagementOfRDSCloudwatchLogStreams
            Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
              - 'logs:GetLogEvents'
            Resource:
              - 'arn:aws:logs:*:*:log-group:RDS*:log-stream:*'
  auroraDBMonitoringInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    DependsOn: auroraDBMonitoringRole
    Properties:
      Path: /
      Roles:
        - !Ref auroraDBMonitoringRole
  auroraDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupName: !Sub '${environment}-${product}-${service}-subnet-group'
      DBSubnetGroupDescription: !Sub '${environment}-${product}-${service}-subnet-group'
      SubnetIds:
        - !ImportValue 
          'Fn::Sub': '${environment}-${product}-vpc-private-subnet-a'
        - !ImportValue 
          'Fn::Sub': '${environment}-${product}-vpc-private-subnet-c'
      Tags:
        - Key: Name
          Value: !Sub '${environment}-${product}-${service}-subnet-group'
  auroraDBClusterParameterGroup:
    Type: 'AWS::RDS::DBClusterParameterGroup'
    Properties:
      Description: !Ref 'AWS::StackName'
      Family: aurora-mysql8.0
      Parameters: 
        character_set_client: utf8
        character_set_connection: utf8
        character_set_database: utf8
        character_set_filesystem: utf8
        character_set_results: utf8
        character_set_server: utf8
        collation_connection: utf8_general_ci
        collation_server: utf8_general_ci
        aurora_enhanced_binlog: 1
        binlog_backup: 0
        binlog_format: ROW
        binlog_replication_globaldb: 0
        binlog_row_image: full
        binlog_row_metadata: full 
      Tags:
        - Key: Name
          Value: !Sub '${environment}-${product}-${service}-parameter-group'
  auroraDBCluster:
    Type: 'AWS::RDS::DBCluster'
    DependsOn: auroraDBSubnetGroup
    Properties:
      MasterUsername: !FindInMap 
        - envMap
        - !Ref environment
        - masterUserName
      MasterUserPassword: !GetAtt 
        - auroraDBMasterCreds
        - Secret
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.06.0
      VpcSecurityGroupIds:
        - !ImportValue 
          'Fn::Sub': '${environment}-${product}-vpc-generalSG'
      DBSubnetGroupName: !Ref auroraDBSubnetGroup
      BackupRetentionPeriod: !FindInMap 
        - envMap
        - !Ref environment
        - backupRetentionPeriod
      PreferredBackupWindow: '01:00-02:00'
      PreferredMaintenanceWindow: 'sun:03:00-sun:04:00'
      DBClusterParameterGroupName: !Ref auroraDBClusterParameterGroup
      Tags:
        - Key: Name
          Value: !Sub '${environment}-${product}-${service}-cluster'
  dbinstance1:
    DependsOn: auroraDBCluster
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}a'
      DBSubnetGroupName: !Ref auroraDBSubnetGroup
      DBParameterGroupName: !Ref auroraDBParameterGroup
      Engine: aurora-mysql
      DBClusterIdentifier: !Ref auroraDBCluster
      PubliclyAccessible: 'false'
      DBInstanceClass: !FindInMap 
        - envMap
        - !Ref environment
        - instanceType
      AutoMinorVersionUpgrade: true
      AllowMajorVersionUpgrade: false
      MonitoringRoleArn: !GetAtt 
        - auroraDBMonitoringRole
        - Arn
      MonitoringInterval: 60
      Tags:
        - Key: Name
          Value: !Sub '${environment}-${product}-${service}-db-instance-1'
  dbinstance2:
    Condition: isProd
    Type: 'AWS::RDS::DBInstance'
    DependsOn: auroraDBCluster
    Properties:
      AvailabilityZone: !Sub '${AWS::Region}c'
      DBSubnetGroupName: !Ref auroraDBSubnetGroup
      DBParameterGroupName: !Ref auroraDBParameterGroup
      Engine: aurora-mysql
      DBClusterIdentifier: !Ref auroraDBCluster
      PubliclyAccessible: 'false'
      DBInstanceClass: !FindInMap 
        - envMap
        - !Ref environment
        - instanceType
      AutoMinorVersionUpgrade: true
      AllowMajorVersionUpgrade: false
      MonitoringRoleArn: !GetAtt 
        - auroraDBMonitoringRole
        - Arn
      MonitoringInterval: 60
      Tags:
        - Key: Name
          Value: !Sub '${environment}-${product}-${service}-db-instance-2'
  auroraDBScalableTarget: 
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    DependsOn: "auroraDBCluster"
    Properties: 
      MaxCapacity: 6
      MinCapacity: 2
      ResourceId: 
        Fn::Join: 
          - ""
          - 
            - "cluster"
            - ":"
            - 
              Ref: "auroraDBCluster"
      RoleARN: 
        Fn::GetAtt: 
          - "auroraDBScalableTargetRole"
          - "Arn"
      ScalableDimension: "rds:cluster:ReadReplicaCount"
      ServiceNamespace: "rds"
  auroraDBScalableTargetPolicy: 
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    DependsOn: "auroraDBScalableTarget"
    Properties: 
      PolicyName: !Sub ${environment}-${product}-${service}-scalingPolicy
      PolicyType: "TargetTrackingScaling"
      ServiceNamespace: "rds"
      ScalingTargetId: 
        Ref: "auroraDBScalableTarget"
      ScalableDimension: "rds:cluster:ReadReplicaCount"
      TargetTrackingScalingPolicyConfiguration: 
        PredefinedMetricSpecification: 
          PredefinedMetricType: "RDSReaderAverageCPUUtilization"
        TargetValue: 70
        ScaleOutCooldown: 300
        ScaleInCooldown: 300
        DisableScaleIn: false
  auroraDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: DB Parameter Group
      Family: aurora-mysql8.0
      Parameters:
        max_allowed_packet: 134217728
      Tags:
        - Key: Name
          Value: !Sub '${environment}-${product}-${service}-parameter-group'

Outputs:
  auroraDBClusterEndpoint:
    Description: The DNS Name Of The Cluster
    Value: !GetAtt 
      - auroraDBCluster
      - Endpoint.Address
    Export:
      Name: !Sub ${environment}-${product}-${service}-endpoint
  auroraDBMasterUserName:
    Description: Master Of Databases
    Value: !FindInMap 
      - envMap
      - !Ref environment
      - masterUserName
    Export:
      Name: !Sub ${environment}-${product}-${service}-masterUserName
  auroraDBCluster:
    Description: Identifier RDS
    Value: !Ref auroraDBCluster
    Export:
      Name: !Sub ${environment}-${product}-${service}-identifier
  auroraDBClusterArn:
    Description: Arn RDS
    Value: !GetAtt auroraDBCluster.DBClusterArn
    Export:
      Name: !Sub ${environment}-${product}-${service}-arn